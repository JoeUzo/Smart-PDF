services:
  # Web app
  - type: web
    name: web
    runtime: docker
    dockerfilePath: ./Dockerfile
    plan: starter
    autoDeploy: true
    healthCheckPath: /
    envVars:
      - fromGroup: ydidu-pdfs
      - key: CELERY_BROKER_URL
        value: redis://redis:6379/0
      - key: CELERY_RESULT_BACKEND
        value: redis://redis:6379/0
      - key: SECRET_KEY
        sync: false
      - key: API_BASE_URL
        sync: false
    # One disk per service, write logs under uploads if you need persistence
    disk:
      name: uploads-web
      mountPath: /app/uploads
      sizeGB: 5

  # Redis container as a private service
  - type: pserv
    name: redis
    runtime: image
    image:
      url: docker.io/library/redis:alpine
    plan: starter
    autoDeploy: true
    disk:
      name: redis-data
      mountPath: /data
      sizeGB: 1

  # Celery worker
  - type: worker
    name: worker
    runtime: docker
    dockerfilePath: ./Dockerfile
    plan: starter
    autoDeploy: true
    startCommand: celery -A app.celery_worker.celery_app worker --loglevel=info
    envVars:
      - fromGroup: ydidu-pdfs
      - key: CELERY_BROKER_URL
        value: redis://redis:6379/0
      - key: CELERY_RESULT_BACKEND
        value: redis://redis:6379/0
      - key: SECRET_KEY
        sync: false
      - key: API_BASE_URL
        sync: false
    disk:
      name: uploads-worker
      mountPath: /app/uploads
      sizeGB: 5

  # Celery heavy queue worker
  - type: worker
    name: heavy-worker
    runtime: docker
    dockerfilePath: ./Dockerfile
    plan: starter
    autoDeploy: true
    startCommand: celery -A app.celery_worker.celery_app worker --loglevel=info -Q heavy
    envVars:
      - fromGroup: ydidu-pdfs
      - key: CELERY_BROKER_URL
        value: redis://redis:6379/0
      - key: CELERY_RESULT_BACKEND
        value: redis://redis:6379/0
      - key: SECRET_KEY
        sync: false
      - key: API_BASE_URL
        sync: false
    disk:
      name: uploads-heavy
      mountPath: /app/uploads
      sizeGB: 5
